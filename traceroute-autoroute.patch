--- ./traceroute.c.orig	Sun Aug 12 15:36:45 2001
+++ ./traceroute.c	Sun Aug 12 15:40:30 2001
@@ -345,6 +345,11 @@
 int	str2val(const char *, const char *, int, int);
 void	tvsub(struct timeval *, struct timeval *);
 __dead	void usage(void);
+
+#ifdef USE_KERNEL_ROUTING_TABLE
+struct ifaddrlist *search_routing_table(struct sockaddr_in *to, struct ifaddrlist *al, int n);
+#endif
+
 int	wait_for_reply(int, struct sockaddr_in *, const struct timeval *);
 #ifndef HAVE_USLEEP
 int	usleep(u_int);
@@ -368,7 +373,7 @@
 	int tos = 0, settos = 0;
 	register int lsrr = 0;
 	register u_short off = 0;
-	struct ifaddrlist *al;
+	struct ifaddrlist *al, *allist;
 	char errbuf[132];
 
 	if (argv[0] == NULL)
@@ -699,7 +704,8 @@
 		    sizeof(on));
 
 	/* Get the interface address list */
-	n = ifaddrlist(&al, errbuf);
+	n = ifaddrlist(&allist, errbuf);
+	al = allist;
 	if (n < 0) {
 		Fprintf(stderr, "%s: ifaddrlist: %s\n", prog, errbuf);
 		exit(1);
@@ -724,12 +730,22 @@
 
 	/* Determine our source address */
 	if (source == NULL) {
+#ifdef USE_KERNEL_ROUTING_TABLE
+		/* Search the kernel routing table for a match with the
+		 * destination address.  Then use that interface.  If
+		 * there is no match, default to using the first
+		 * interface found.
+		 */
+		al = search_routing_table(to, allist, n);
+		setsin(from, al->mask);
+#else
+			
 		/*
 		 * If a device was specified, use the interface address.
 		 * Otherwise, try to determine our source address.
 		 */
 		if (device != NULL)
-			setsin(from, al->addr);
+			setsin(from, al->mask);
 		else if ((err = findsaddr(to, from)) != NULL) {
 			Fprintf(stderr, "%s: findsaddr: %s\n",
 			    prog, err);
@@ -747,7 +763,7 @@
 		 */
 		if (device != NULL) {
 			for (i = hi->n, ap = hi->addrs; i > 0; --i, ++ap)
-				if (*ap == al->addr)
+				if (*ap == al->mask)
 					break;
 			if (i <= 0) {
 				Fprintf(stderr,
@@ -763,6 +779,7 @@
 			"%s: Warning: %s has multiple addresses; using %s\n",
 				    prog, source, inet_ntoa(from->sin_addr));
 		}
+#endif
 		freehostinfo(hi);
 	}
 
@@ -1401,3 +1418,86 @@
 	    "\t[-w waittime] [-z pausemsecs] host [packetlen]\n", prog);
 	exit(1);
 }
+#ifdef USE_KERNEL_ROUTING_TABLE
+
+/* This function currently only supports IPv4.  Someone who knows
+ * more about multi-protocol socket stuff should take a look at this.
+ *
+ * (But does it make any sense for traceroute to support other
+ * protocols?  Maybe IPv6...
+ */
+
+struct ifaddrlist *search_routing_table(struct sockaddr_in *to, struct ifaddrlist *al, int n)
+{
+	struct ifaddrlist *first_if;
+	FILE *fp;
+	char buf[1024];
+	char ifname[128];
+	unsigned int route_dest;
+	unsigned int mask;
+	char best_name[128];
+	unsigned int best_mask;
+	unsigned int dest_addr;
+	unsigned int convs;
+	
+	/* How come using ntohl(to->sin_addr.s_addr) doesn't work here? */
+	dest_addr = to->sin_addr.s_addr;
+	
+	fp = fopen("/proc/net/route", "r");
+	if (fp == NULL) {
+		return al;
+	}
+	
+	/* Skip the first line (the column headings) */
+	if (fgets(buf, sizeof(buf), fp) == NULL) {
+		fclose(fp);
+		return al;
+	}
+	best_name[0] = '\0';
+	best_mask = 0;
+	
+	while (fgets(buf, sizeof(buf), fp) != NULL) {
+		/* Field 1: interface name
+		 * Field 2: dest addr
+		 * Field 8: genmask
+		 */
+		convs = sscanf(buf, "%s %x %*s %*s %*s %*s %*s %x",
+			ifname, &route_dest, &mask);
+		if (convs != 3) {
+			/* format error .... */
+			fclose(fp);
+			return al;
+		}
+
+		if ((dest_addr & mask) == route_dest) {
+			/* This routing entry applies to
+			 * our destination addr
+			 */
+			if ((mask > best_mask) || (best_mask == 0)) {
+				/* And it is more specific than any
+				 * previous match (or is the first match)
+				 */
+				best_mask = mask;
+				strncpy(best_name, ifname, sizeof(best_name));
+			}
+		}
+	}
+
+	fclose(fp);
+	
+	/* If we don't find a match, we'll return the first entry */
+	first_if = al;
+	
+	while (al < first_if + n) {
+		if (strcmp(best_name, al->device) == 0) {
+			/* Got a match */
+			return al;
+		}
+		al++;
+	}
+
+	return first_if;
+}
+
+#endif
+								
--- ./findsaddr-linux.c.orig	Sun Aug 12 15:43:35 2001
+++ ./findsaddr-linux.c	Sun Aug 12 15:44:05 2001
@@ -132,6 +132,6 @@
 		return (errbuf);
 	}
 
-	setsin(from, al->addr);
+	setsin(from, al->mask);
 	return (NULL);
 }
